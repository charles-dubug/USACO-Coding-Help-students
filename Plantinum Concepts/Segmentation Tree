from math import ceil, log2
class SegmentationTree():
    def __init__(self,input_list):
        self._input_list = input_list[:] ## copy of input_list
        self._init_tree()
        self._is_propogated = True

    def _init_tree(self):
        ## create segmentation tree infrustructure

        #length of list
        self._n = len(self._input_list)
        
        #calc.height
        height = ceil(log2(self._n))
        #calc.number of nodes
        n_nodes = 2*(2**height)-1
        #create empty seg_tree list
        self._seg_tree = [None]*n_nodes

        ##Fill in segmentation tree
        #propogate seg_tree lst
        arr_left = 0
        arr_right = self._n-1
        seg_node_index = 0
        self._propogate(arr_left,arr_right,seg_node_index)

    def _propogate(self,arr_left,arr_right,seg_node_index):
        # recursive implementation
        # Base cases
        if arr_right < arr_left: #went too far
            return

        if arr_left == arr_right: # when honed into targeted index
            value = self._input_list[arr_left]
            #assign value intp seg_tree at correct index
            self._seg_tree[seg_node_index] = value
            return

        # recursive call = we are at a parent code
        midpoint = (arr_left+arr_right)//2 #floor division

        #left side
        left_seg_node_index = seg_node_index*2+1
        left_node_arr_left = arr_left
        left_node_arr_right = midpoint
        self._propogate(left_node_arr_left,left_node_arr_right, left_seg_node_index)
        
        #right side
        right_seg_node_index = seg_node_index*2+2
        right_node_arr_left = midpoint + 1
        right_node_arr_right = arr_right
        self._propogate(right_node_arr_left,right_node_arr_right, right_seg_node_index)

        #handle parents
        left_val = self._seg_tree[left_seg_node_index]
        right_val = self._seg_tree[right_seg_node_index]
        self._seg_tree[seg_node_index] = left_val + right_val

        
    def query(self,query_left,query_right):
        arr_left = 0
        arr_right = self._n-1
        seg_node_index = 0
        if not self._is_propogated:
            self._propogate(arr_left,arr_right,seg_node_index)
        # start searching from root node
        return self._query_helper(query_left,query_right,arr_left,arr_right,seg_node_index)

    def _query_helper(self,query_left, query_right,arr_left,arr_right,seg_node_index):
        # recursive implementation
        # Base cases
        if arr_right < arr_left: #went too far
            return 0

        if query_right < arr_left or arr_right < query_left: #node outside query range
            return 0

        if query_left <= arr_left and arr_right <= query_right: #current node completely in query range
            return self._seg_tree[seg_node_index]
        
        # recursive call = we are at a parent code that is partially covering query
        midpoint = (arr_left+arr_right)//2 #floor division

        #left side
        left_seg_node_index = seg_node_index*2+1
        left_node_arr_left = arr_left
        left_node_arr_right = midpoint
        left_val = self._query_helper(query_left, query_right, left_node_arr_left,left_node_arr_right, left_seg_node_index)
        
        #right side
        right_seg_node_index = seg_node_index*2+2
        right_node_arr_left = midpoint + 1
        right_node_arr_right = arr_right
        right_val = self._query_helper(query_left, query_right,right_node_arr_left,right_node_arr_right, right_seg_node_index)

        #handle parents
        return left_val + right_val

    def update(self,arr_index,new_value): #lazy update
        self._input_list[arr_index] = new_value
        self._is_propogated = False
                
nums = [1,3,5]
st = SegmentationTree(nums)
print(st._seg_tree)
print(st.query(0,2))
st.update(1,2)
print(st._seg_tree)
print(st.query(0,2))

nums = [3,4,10,2,7]
st_2 = SegmentationTree(nums)
print(st_2._seg_tree)
print(st_2.query(1,3))
st_2.update(2,9)
print(st_2._seg_tree)
print(st_2.query(1,3))
