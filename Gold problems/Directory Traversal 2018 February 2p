[N,B] = list(map(int,input().split()))
f = list(map(int,input().split()))
s = []
d = []

for i in range(B):
    [si, di] = list(map(int, input().split()))
    s.append(si)
    d.append(di)

dp = [[False]*(N) for i in range(B)] #dp[i][j] Determine whether the i-th pair of boots can reach the j-th brick
dp[0][0] = True

for i in range(B):
    for j in range(N):
        #If the si of the current boots < the fi of the brick, then this pair of boots must not reach the last brick at this time
        if s[i] < f[j]:
            continue

        # That is to say, the logic of being able to get here must be that the si of the boot is greater than the fi of the brick
        #dp[i][j]
        #Here is based on the same pair of boots, to determine whether this pair of boots has an accessible brick on the left side of brick j
        for k in range(j,j-d[i]-1,-1):
            if k>=0 and dp[i][k]==True: #There are bricks reachable within the radius of boot i
                dp[i][j] = True
                break

        #Here is based on the same brick, to determine whether there are boots to reach this brick
        for k in range(0,i):
            if dp[k][j] == True:
                dp[i][j] = True
                break

        #If the last brick is reached, and the i-th pair of boots can reach this brick, then the number of discarded boots is i
        if j==N-1 and dp[i][j]==True:
            print(i)
            exit(0)
